# Django settings for gphblog project.

import os.path #needed for use in path constructions

#project root dir path
PROJECT_ROOT = os.path.join(os.path.abspath(os.path.dirname(__file__)), '').replace('\\','/')

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
     #('Dummy Dummy', 'dummy@example.com'),
)

MANAGERS = ADMINS

# default base config
DATABASES = {
    'default': {
        'ENGINE': 'sqlite3',
        'NAME': os.path.join(PROJECT_ROOT, 'gphblog.db').replace('\\','/'),
    }
}

#timezone: choose yours
TIME_ZONE = 'Europe/Kiev'
LANGUAGE_CODE = 'en-us'
SITE_ID = 1
USE_I18N = True

#default media dir is set to: projectdir/madia
#you can override this by changing this setting
MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'media/').replace('\\','/')

# change it to your media URL
MEDIA_URL = 'http://127.0.0.1:8000/site_media/'

# change it to your MEDIA dir path
ADMIN_MEDIA_PREFIX = '/media/'

# Insert your own generated key here
SECRET_KEY = 'PLEASE ENTER YOUR KEY HERE!'

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
)

TEMPLATE_CONTEXT_PROCESSORS = (
    "django.core.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "django.core.context_processors.request"

)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.csrf.CsrfResponseMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'pagination.middleware.PaginationMiddleware',
)

ROOT_URLCONF = 'gphblog.urls'

TEMPLATE_DIRS = (
    os.path.join(PROJECT_ROOT, 'templates/').replace('\\','/'),
)

AUTHENTICATION_BACKENDS = (
    'social_auth.backends.twitter.TwitterBackend',
    'social_auth.backends.facebook.FacebookBackend',
    'social_auth.backends.google.GoogleOAuthBackend',
    'social_auth.backends.google.GoogleOAuth2Backend',
    'social_auth.backends.google.GoogleBackend',
    'social_auth.backends.yahoo.YahooBackend',
    'social_auth.backends.contrib.linkedin.LinkedinBackend',
    'social_auth.backends.OpenIDBackend',
    'django.contrib.auth.backends.ModelBackend',
)

INSTALLED_APPS = (
############################################# DJANGO PARTS ##########################################
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.sitemaps',
############################################## MY APPS ##############################################
    'auth',
    'photo',
    'feeds',
    'content_grabber',
    'multiuploader',
############################################# PLUGINS ###############################################
    'flickrapi',#Python frontend to flickr api
    'captcha',#captcha plugin
    'notification', #notification system plugin django-notification
    'tagging', #tagging library
    'pagination', #pagination generation lib
    'sorl.thumbnail', #thumbnail generation lib
    'syncr.flickr',  #app to sync django with a set of websites
    'oauth2', #for social registration plugin
    'httplib2', #need for oauth2 plugin
    'social_auth', #for social registration backends to work properly
)



#setting for using sorl lib
INTERNAL_IPS = ('127.0.0.1',)

#settings for content grabber
#change 'xxxx'-es to your flickr APP keys obtained from flickr (see readme)
FLICKR_API_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
FLICKR_API_SECRET = 'xxxxxxxxxxxxxxxx'


#social registration app keys and data
TWITTER_CONSUMER_KEY         = ''
TWITTER_CONSUMER_SECRET      = ''
FACEBOOK_APP_ID              = ''
FACEBOOK_API_SECRET          = ''
LINKEDIN_CONSUMER_KEY        = ''
LINKEDIN_CONSUMER_SECRET     = ''
GOOGLE_CONSUMER_KEY          = ''
GOOGLE_CONSUMER_SECRET       = ''
GOOGLE_OAUTH2_CLIENT_KEY     = ''
GOOGLE_OAUTH2_CLIENT_SECRET  = ''

LOGIN_URL          = '/accounts/login/'
LOGIN_REDIRECT_URL = '/photo/'

LOGIN_ERROR_URL    = '/photo/'
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/accounts/profile/'
SOCIAL_AUTH_NEW_ASSOCIATION_REDIRECT_URL = '/accounts/profile/'
SOCIAL_AUTH_DISCONNECT_REDIRECT_URL = '/accounts/profile/'

#In case of authentication error, the message can be stored in session if the following setting is defined:
SOCIAL_AUTH_ERROR_KEY = 'social_errors'

SOCIAL_AUTH_COMPLETE_URL_NAME  = 'complete'
SOCIAL_AUTH_ASSOCIATE_URL_NAME = 'associate_complete'

SOCIAL_AUTH_DEFAULT_USERNAME = 'social_auth_user'

SOCIAL_AUTH_SESSION_EXPIRATION = False


#Facebook like button admin user ID
FACEBOOK_USER_ID =''


#logging cofiguration
#configured to write gphblog.log in the folder where project folder located
import logging
PROJECT_DIR = os.path.dirname(__file__)
PARENT_DIR = os.path.dirname(PROJECT_DIR)
logging.basicConfig(level=logging.DEBUG,
     format='%(asctime)s %(levelname)s %(message)s',
     filename=os.path.join(PARENT_DIR, 'gphblog.log'),
     filemode='a+'
)